{
  "name": "P language",
  "scopeName": "source.p",
  "fileTypes": [
    "p"
  ],
  "uuid": "02d90f6f-553b-4a22-a121-a8ddeb6dade4",
  "patterns": [
    {
      "name": "meta.typedecl",
      "match": "(\\btype\\b)\\s+([\\w_]+\\b)\\s*",
      "captures": {
        "1": {
          "name": "keyword.statement.structural"
        },
        "2": {
          "name": "storage.type.other"
        }
      }
    },
    {
      "name": "meta.enumdecl",
      "begin": "(\\benum\\b)\\s*([\\w_]+\\b)\\s+({)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.primitives"
        },
        "2": {
          "name": "storage.type.other"
        }
      },
      "end": "(})",
      "patterns": [
        {
          "include": "#normal_parameters"
        }
      ]
    },
    {
      "name": "meta.eventdecl",
      "match": "(\\bevent\\b)\\s+([\\w_]+\\b)",
      "captures": {
        "1": {
          "name": "storage.type.primitives"
        },
        "2": {
          "name": "storage.type.other"
        }
      }
    },
    {
      "include": "#comments"
    },
    {
      "include": "#primitive_func"
    },
    {
      "include": "#control_statements"
    },
    {
      "include": "#expressions"
    },
    {
      "include": "#statements"
    },
    {
      "include": "#predefined_types"
    },
    {
      "include": "#functiondeclare"
    },
    {
      "include": "#functioncall"
    },
    {
      "include": "#tuples"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#othertypes"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "statements": {
      "patterns": [
        {
          "name": "keyword.statement.structural",
          "match": "\\bnew\\b|\\bvar\\b|\\bstate\\b|\\bhot\\b|\\bcold\\b|\\bstart\\b|\\bspec\\b|\\bcase\\b|\\bmodule\\b|\\btest\\b|\\bmain\\b|\\bfun\\b|\\bobserves\\b|\\bentry\\b|\\bexit\\b|\\bwith\\b|\\bunion\\b|\\main\\b|\\btype\\b"
        },
        {
          "name": "keyword.control",
          "match": "\\bgoto\\b|\\bforeach\\b|\\bon\\b|\\bdo\\b|\\belse\\b|\\bwhile\\b|\\breturn\\b|\\bbreak\\b|\\bcontinue\\b|\\bignore\\b|\\bdefer\\b"
        },
        {
          "name": "keyword.statement.other",
          "match": "\\bassert\\b|\\bprint\\b|\\bnew\\b|\\braise\\b|\\bsend\\b|\\bannounce\\b"
        }
      ]
    },
    "primitive_func": {
      "name": "primitive_func",
      "begin": "(sizeof|keys|values|default|choose)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.primitive"
        }
      },
      "end": "\\)",
      "patterns": [
        {
          "include": "#othertypes"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "name": "expression.format",
          "begin": "(\\bformat\\b)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "support.function"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#strings"
            },
            {
              "include": "#attributes"
            }
          ]
        },
        {
          "name": "expression.controls",
          "begin": "(while|if|foreach)\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.control"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#operators"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "name": "support.function",
          "match": "\\bhalt\\b|\\bthis\\b|\\bas\\b|\\bto\\b|\\bchoose\\b"
        },
        {
          "name": "support.function",
          "match": "\\$"
        },
        {
          "name": "entity.name.function.primitive",
          "match": "\\bin\\b|\\bsizeof\\b|\\bkeys\\b|\\bvalues\\b|\\bdefault\\b|\\bchoose\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b\\w*Interface\\b|\\bI[A-Z]\\w*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison",
          "match": "<|>|<=|>=|&&|(\\|\\|)"
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\-|\\+|\\*|\\%|\\/|\\!"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language",
          "match": "\\btrue\\b|\\bfalse\\b"
        },
        {
          "name": "constant.numeric",
          "match": "(-?[1-9]+[0-9]*|0|[0-9]*\\.[0-9]+)"
        }
      ]
    },
    "strings": {
      "name": "string",
      "match": "(\".*\")"
    },
    "tuples": {
      "patterns": [
        {
          "name": "meta.tuple.named.types",
          "begin": "(\\()([\\w]+)\\s?:\\s?(?=[\\w]\\,)",
          "end": "\\)",
          "patterns": [
            {
              "include": "#predefined_types"
            }
          ]
        },
        {
          "name": "meta.tuple.named.assigned",
          "begin": "(\\()([\\w]+)\\s?=",
          "beginCaptures": {
            "2": {
              "name": "storage.type"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#assignments"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#functioncall"
            },
            {
              "include": "#expressions"
            }
          ]
        },
        {
          "name": "meta.tuple.unnamed",
          "begin": "\\((?=\\w+\\,)",
          "end": "\\)",
          "patterns": [
            {
              "include": "#constants"
            },
            {
              "include": "#predefined_types"
            }
          ]
        }
      ]
    },
    "functiondeclare": {
      "name": "meta.method.functiondecl",
      "begin": "(fun)\\s+([[:alpha:]_][[:alnum:]_]*)(?=(\\())",
      "beginCaptures": {
        "1": {
          "name": "keyword.other"
        },
        "2": {
          "name": "entity.name.function"
        }
      },
      "end": "(\\))\\s?(:\\s?[[:alpha:]_]+)?",
      "endCaptures": {
        "2": {
          "name": "storage.type"
        }
      },
      "patterns": [
        {
          "include": "#colon_parameters"
        },
        {
          "include": "#"
        }
      ]
    },
    "functioncall": {
      "name": "meta.method.functioncall",
      "begin": "([[:alpha:]_][[:alnum:]_]*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.user"
        }
      },
      "end": "(\\))",
      "patterns": [
        {
          "include": "#predefined_types"
        },
        {
          "include": "#colon_parameters"
        },
        {
          "include": "#expressions"
        },
        {
          "include": "#attributes"
        },
        {
          "include": "#tuples"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.p"
            }
          }
        },
        {
          "name": "comment.line.double-slash",
          "match": "(//).*$\\n?",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.p"
            }
          }
        }
      ]
    },
    "predefined_types": {
      "patterns": [
        {
          "name": "storage.type.primitives",
          "match": "\\bint\\b|\\bbool\\b|\\bfloat\\b|\\bstring\\b|\\bmachine\\b|\\bevent\\b"
        },
        {
          "name": "storage.type.other",
          "match": "\\bseq\\b|\\bmap\\b|\\bset\\b|\\bany\\b|\\bdata\\b"
        }
      ]
    },
    "assignments": {
      "name": "assignments",
      "match": "([\\w]+)\\s?=",
      "captures": {
        "1": {
          "name": "storage.type"
        }
      }
    },
    "attributes": {
      "name": "meta.structure.attribute",
      "match": "\\.([[:alpha:]_]+)",
      "captures": {
        "1": {
          "name": "storage.type"
        }
      }
    },
    "colon_parameters": {
      "name": "meta.parameters",
      "match": ":\\s*(?=[\\w_]+)",
      "patterns": [
        {
          "include": "#predefined_types"
        },
        {
          "name": "storage.type",
          "match": "(\\w_)+"
        }
      ]
    },
    "normal_parameters": {
      "name": "meta.parameters",
      "match": "([\\w_]+)",
      "captures": {
        "1": {
          "name": "storage.type"
        }
      }
    }
  }
}
