# [PackageDev] target_format: plist, ext: tmLanguage
name: P language
scopeName: source.p
fileTypes: [p]
uuid: 02d90f6f-553b-4a22-a121-a8ddeb6dade4


patterns:
# Declarations of types, variables, enums, and events
- name: meta.vardecl 
  match: (\bvar\b)\s+([A-Za-z]+\w*)
  captures:
    "1":
      name: keyword.statement.structural 
- name: meta.typedecl
  match: (\btype\b)\s+([A-Za-z]+\w*)\s*
  captures:
    "1":
      name: keyword.statement.structural
    "2":
      name: storage.type.other
- name: meta.enumdecl 
  begin: (\benum\b)\s*([A-Za-z]+\w*)\s+({)
  beginCaptures:
    "1":
      name: storage.type.primitives
    "2":        
      name: storage.type.other
  end: (})
  patterns:
  - include: "#normal_parameters"
- name: meta.eventdecl 
  match: (\bevent\b)\s+([A-Za-z]+\w*)
  captures:
    "1":
      name: storage.type.primitives
    "2":        
      name: storage.type.event
- name: meta.onstatement
  match: (\bon\b)\s+([A-Za-z]+\w*)\s+(do|goto)
  captures: 
    "1":
      name: keyword.statement.structural 
    "2":
      name: storage.type.event
    "3":
      name: keyword.statement.structural 
- name: meta.casestatement 
  match: (\bcase\b)\s+([A-Za-z]+\w*)
  captures:
    "1":
      name: keyword.control 
    "2":
      name: storage.type.event 
- name: meta.sendstatement 
  match: (\bsend\b)\s+([A-Za-z]+\w*)\,\s+([A-Za-z]+\w*)
  captures:
    "1": 
      name: keyword.statement.other 
    "3":
      name: storage.type.event
- name: meta.machinedecl 
  match: (\bmachine\b)\s+([A-Za-z]+\w*)
  captures:
    "1":
      name: storage.type.primitives
    "2":
      name: storage.type.other

    
  

# Other rules in P
- include: '#comments'
- include: "#primitive_func"
- include: "#expressions"
- include: "#statements"
- include: "#predefined_types"
- include: "#functiondeclare"
- include: "#colon_parameters"
- include: "#functioncall"
- include: "#tuples"
- include: "#constants"
- include: "#operators"
- include: "#strings"
- include: "#identifier"




repository:
  statements:
    patterns:
    - name: keyword.statement.structural
      match: \bvar\b|\bstate\b|\bhot\b|\bcold\b|\bstart\b|\bspec\b|\bcase\b|\bmodule\b|\btest\b|\bmain\b|\bfun\b|\bobserves\b|\bentry\b|\bexit\b|\bwith\b|\bunion\b|\main\b|\btype\b|\bon\b|\bdo\b
    - name: keyword.control
      match: \bforeach\b|\belse\b|\bwhile\b|\breturn\b|\bbreak\b|\bcontinue\b|\bignore\b|\bdefer\b
    - name: keyword.statement.other
      match: \bassert\b|\bprint\b|\bnew\b|\braise\b|\bsend\b|\bannounce\b|\breceive\b|\bgoto\b
  primitive_func:
    patterns:
    - name: primitive_func
      begin: (sizeof|keys|values|choose)
      beginCaptures: 
        "1":
          name: entity.name.function.primitive
      end: \)
      patterns:
      - include: "#operators"
      - include: "#constants"
      - include: "#strings"
      - include: "#expressions"
      - include: "#identifier"
    - name: default_func 
      begin: default
      beginCaptures:
        "1": 
          name: entity.name.function.primitive 
      end: \) 
      contentName: storage.type.other
  expressions:
    patterns:
    - name: expression.format
      begin: (\bformat\b)\s*\(
      beginCaptures: 
        "1":
          name: support.function
      end: \)
      patterns:
      - include: "#strings"
    - name: expression.controls
      begin: (while|if|foreach)\(
      beginCaptures: 
        "1":
          name: keyword.control
      end:  \)
      patterns:
      - include: "#functioncall"
      - include: "#operators"
      - include: "#constants"
      - include: "#strings"
      - include: "#expressions"
      - include: "#identifier"

    - name: support.function
      match: \bhalt\b|\bthis\b|\bas\b|\bto\b|\bchoose\b
    - name: support.function
      match: \$
    - name: entity.name.function.primitive
      match: \bin\b|\bsizeof\b|\bkeys\b|\bvalues\b|\bdefault\b|\bchoose\b
    - name: storage.type
      match: \b\w*Interface\b|\bI[A-Z]\w*\b

  operators: #Operators in P including =, various comparison operators, and various arithmetic operators. 
    patterns:
    - name: keyword.operator.assignment
      match: =
    - name: keyword.operator.comparison
      match: <|>|<=|>=|&&|(\|\|)
    - name: keyword.operator.arithmetic 
      match: \-|\+|\*|\%|\/|\!

  constants:  #Constants in P, including booleans, integers, floats
    patterns:
    - name: constant.language #constant booleans
      match: \btrue\b|\bfalse\b
    - name: constant.numeric  #constant numbers
      match: (-?[1-9]+[0-9]*|0|[0-9]*\.[0-9]+)
  strings: 
    name: string
    match: (".*")

  tuples: #Tuples in P, including named tuples and unnamed tuples. 
    patterns:
    - name: meta.tuple.named.types
      begin: (\()([A-Za-z]+\w*)\s?:\s?(?=[\w]\,)
      end: \)
      patterns:
      - include: "#predefined_types"
    - name: meta.tuple.named.assigned
      begin: (\()([A-Za-z]+\w*)\s?(=)
      beginCaptures:
        '2': {name: storage.type}
        '3': {name: keyword.operator.assignment}
      end: \)
      patterns:
      - include: "#assignments"
      - include: "#constants"
      - include: "#strings"
      - include: "#functioncall"
      - include: "#expressions"
      - include: "#identifier"

    #Un-named tuples 
    - name: meta.tuple.unnamed
      begin: \((?=[A-Za-z]+\w*\,)
      end: \)
      patterns:
      - include: "#constants"
      - include: "#predefined_types"
  #These rules cover various function interactions, including function declarations and function calls. 
  functiondeclare:  
    name: meta.method.functiondecl
    begin: (fun)\s+([A-Za-z]+\w*)(?=(\())
    beginCaptures:
      '1': {name: keyword.other}
      '2': {name: entity.name.function}
    end: (\))\s?(:\s?[A-Za-z]+\w*)?
    endCaptures:
      '2': {name: storage.type}
    patterns:

      - include: "#colon_parameters"
  functioncall:
    name: meta.method.functioncall
    begin: ([A-Za-z]+\w*)\s*(\()
    beginCaptures:
      '1': {name: entity.name.function.user}
    end: (\))
    patterns:
      - include: "#predefined_types"
      - include: "#colon_parameters"
      - include: "#expressions"
      - include: "#tuples"
      - include: "#operators"
      - include: "#identifier"


  #Comments, including comment blocks and one-line comments. 
  comments:
    patterns:
    - name: comment.block
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.p}
    - name: comment.line.double-slash
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.p}
  #These rules cover different types inside of P, including primitives as well as other types (e.g. collections, supertypes..)
  predefined_types:
    patterns:
    - name: storage.type.primitives
      match: \bint\b|\bbool\b|\bfloat\b|\bstring\b|\bmachine\b|\bevent\b
    - name: storage.type.other
      match: \bseq\b|\bmap\b|\bset\b|\bany\b|\bdata\b
  #The below rules cover the different data strucutures within function interactions as well as within tuples. 
  assignments:
    name: assignments
    match: ([A-Za-z]+\w*)\s?(=)
    captures:
      '1': {name: storage.type}
      '2': {name: keyword.operator.assignment}
  attributes:
    name: meta.structure.attribute
    match: \.([A-Za-z]+\w*)
    captures:
      '1': {name: storage.type} 
  colon_parameters:
    patterns:
    - name: meta.parameters.predefined
      match: :\s*(\bint\b|\bbool\b|\bfloat\b|\bstring\b|\bmachine\b|\bevent\b)
      captures:
        '1': {name: storage.type.primitives}
    - name: meta.parameters.other
      match: :\s*([A-Za-z]+\w*)
      captures:
        '1': {name: storage.type.other}
    
  normal_parameters:
    name: meta.parameters
    match: ([A-Za-z]+\w*)
    captures:
      '1': {name: storage.type}
  identifier:
    name: meta.identifier 
    match: ([A-Za-z]+[\w_]*)
  equal_sign:
    name: keyword.operator.assignment
    match: \=

  


  






