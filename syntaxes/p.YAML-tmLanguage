# [PackageDev] target_format: plist, ext: tmLanguage
name: P language
scopeName: source.p
fileTypes: [p]
uuid: 02d90f6f-553b-4a22-a121-a8ddeb6dade4


patterns:
# Declarations of types, variables, enums, and events
- name: meta.vardecl.primitive
  match: (\bvar\b)\s+([\w_]+\b)\s*:\s*(\bint\b|\bbool\b|\bfloat\b|\bstring\b|\bmachine\b|\bevent\b)
  captures:
    "1":
      name: keyword.statement.structural
    "2":
      name: variable
    "3":
      name: storage.type.primitives
- name: meta.vardecl.nonprimitives
  match: (\bvar\b)\s+([\w_]+\b)\s*:\s*([\w_]+\b)
  captures:
    "1":
      name: keyword.statement.structural
    "2":
      name: variable
    "3":
      name: storage.type.other
- name: meta.typedecl
  match: (\btype\b)\s+([\w_]+\b)\s*
  captures:
    "1":
      name: keyword.statement.structural
    "2":
      name: storage.type.other
- name: meta.enumdecl 
  begin: (\benum\b)\s*([\w_]+\b)\s+({)
  beginCaptures:
    "1":
      name: storage.type.primitives
    "2":        
      name: storage.type.other
  end: (})
  patterns:
  - include: "#normal_parameters"
- name: meta.eventdecl 
  match: (\bevent\b)\s+([\w_]+\b)
  captures:
    "1":
      name: storage.type.primitives
    "2":        
      name: storage.type.other

#statements : statements in the P language referenced in https://p-org.github.io/P/manual/statements/
- name: keyword.statement.structural
  match: \bvar\b|\bstate\b|\bhot\b|\bcold\b|\bstart\b|\bspec\b|\bcase\b|\bmodule\b|\btest\b|\bmain\b|\bfun\b|\bobserves\b|\bentry\b|\bexit\b|\bwith\b|\bunion\b|\main\b|\btype\b
- name: keyword.control
  match: \bgoto\b|\bforeach\b|\bon\b|\bdo\b|\belse\b|\bwhile\b|\breturn\b|\bbreak\b|\bcontinue\b|\bignore\b|\bdefer\b
- name: keyword.statement.other
  match: \bassert\b|\bprint\b|\bnew\b|\braise\b|\bsend\b|\bannounce\b
  
#expressions : expressions in the P language referenced in https://p-org.github.io/P/manual/expressions/ 
# - name: expression.format
#   begin: (\bformat\b)\s*\(
#   beginCaptures: 
#     "1":
#       name: support.function
#   end: \)
#   patterns:
#   - include: "#strings"
# - name: expression.if
#   begin: (\bif\b)\(
#   beginCaptures: 
#     "1":
#       name: keyword.control
#   end:  \)
#   patterns:
#   - include: "#operators"
#   - include: "#constants"
#   - include: "#strings"
#   - include: "#attributes" 

# - name: support.function
#   match: \bhalt\b|\bthis\b|\bnew\b|\bas\b|\bto\b|\bchoose\b
# - name: support.function
#   match: \$
# - name: entity.name.function.primitive
#   match: \bsizeof\b|\bkeys\b|\bvalues\b|\bin\b|\bdefault\b
# - name: storage.type
#   match: \b\w*Interface\b|\bI[A-Z]\w*\b

# Other rules in P
- include: '#comments'
- include: "#primitives"
- include: "#functiondeclare"
- include: "#expressions"
- include: "#functioncall"
- include: "#tuples"
- include: "#attributes"
- include: "#othertypes"
- include: "#constants"
- include: "#operators"
- include: "#strings"




repository:
#This is a dictionary of rules which can be included from other places in the grammar through the "include" keyword. 
#The key is the name of the rule and the value is the actual rule.
  expressions:
    patterns:
    - name: expression.format
      begin: (\bformat\b)\s*\(
      beginCaptures: 
        "1":
          name: support.function
      end: \)
      patterns:
      - include: "#strings"
    - name: expression.if
      begin: (\bif\b)\(
      beginCaptures: 
        "1":
          name: keyword.control
      end:  \)
      patterns:
      - include: "#operators"
      - include: "#constants"
      - include: "#strings"
      - include: "#attributes" 
      - include: "#expressions"

    - name: support.function
      match: \bhalt\b|\bthis\b|\bnew\b|\bas\b|\bto\b|\bchoose\b
    - name: support.function
      match: \$
    - name: entity.name.function.primitive
      match: \bsizeof\b|\bkeys\b|\bvalues\b|\bin\b|\bdefault\b
    - name: storage.type
      match: \b\w*Interface\b|\bI[A-Z]\w*\b
  operators: #Operators in P including =, various comparison operators, and various arithmetic operators. 
    patterns:
    - name: keyword.operator.assignment
      match: =
    - name: keyword.operator.comparison
      match: <|>|<=|>=|&&|(\|\|)
    - name: keyword.operator.arithmetic 
      match: \-|\+|\*|\%|\/|\!
  constants:  #Constants in P, including booleans, integers, floats
    patterns:
    - name: constant.language #constant booleans
      match: \btrue\b|\bfalse\b
    - name: constant.numeric  #constant numbers
      match: \b([1-9]+[0-9]*|0|[0-9]*\.[0-9]*)\b
  strings: 
    name: string
    match: (".*")
  tuples: #Tuples in P, including named tuples and unnamed tuples. 
    patterns:
    - name: meta.tuple.named.types
      begin: (\()([\w]+)\s?:\s?([\w]+)
      beginCaptures:
        '3': {name: storage.type}
      end: \)
      patterns:
      - include: "#colon_parameters"
    - name: meta.tuple.named.assigned
      begin: (\()([\w]+)\s?=
      beginCaptures:
        '2': {name: storage.type}
      end: \)
      patterns:
      - include: "#assignments"
      - include: "#attributes"
      - include: "#constants"
      - include: "#strings"
      - include: "#functioncall"
    - name: meta.tuple.unnamed
      begin: (\()
      end: \)
      patterns:
      - name: storage.type
        match: ([\w])+
      - include: "#primitives"
      - include: "#operators"
  #These rules cover various function interactions, including function declarations and function calls. 
  functiondeclare:  
    name: meta.method.functiondecl
    begin: (fun)\s+([[:alpha:]_][[:alnum:]_]*)(?=(\())
    beginCaptures:
      '1': {name: keyword.other}
      '2': {name: entity.name.function}
    end: (\))\s?(:\s?[[:alpha:]_]+)?
    endCaptures:
      '2': {name: storage.type}
    patterns:
      - include: "#colon_parameters"
      - include: "#"
  functioncall:
    name: meta.method.functioncall
    begin: ([[:alpha:]_][[:alnum:]_]*)\s*(?=(\())
    beginCaptures:
      '1': {name: entity.name.function.user}
    end: (\))
    patterns:
      - include: "#colon_parameters"
      - include: "#expressions"
      - include: "#attributes"

  #Comments, including comment blocks and one-line comments. 
  comments:
    patterns:
    - name: comment.block
      begin: /\*
      end: \*/
      captures:
        '0': {name: punctuation.definition.comment.p}
    - name: comment.line.double-slash
      match: (//).*$\n?
      captures:
        '1': {name: punctuation.definition.comment.p}
  #These rules cover different types inside of P, including primitives as well as other types (e.g. collections, supertypes..)
  primitives:
    name: storage.type.primitives
    match: \bint\b|\bbool\b|\bfloat\b|\bstring\b|\bmachine\b|\bevent\b
  othertypes:
    name: storage.type.other
    match: \bseq\b|\bmap\b|\bset\b|\bany\b|\bdata\b
  #The below rules cover the different data strucutures within function interactions as well as within tuples. 
  assignments:
    name: assignments
    match: ([\w]+)\s?=
    captures:
      '1': {name: storage.type}
  attributes:
    name: meta.structure.attribute
    match: \.([[:alpha:]_]+)
    captures:
      '1': {name: storage.type} 
  colon_parameters:
    name: meta.parameters
    match: :\s*([\w_]+)
    captures:
      '1': {name: storage.type}
  normal_parameters:
    name: meta.parameters
    match: ([\w_]+)
    captures:
      '1': {name: storage.type}
  

  






