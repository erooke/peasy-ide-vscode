{
    "Machine": {
        "prefix": ["machine "],
        "body": ["machine ${1:_name_} {",
            "\tstart state ${2:_stateName_} {",
            "\t\tentry (${3:_entryName_}) {",
            "\t\t\t${4:_body_};",
            "\t\t}",
        "\t}",
        "}"
        ], 
        "description": "P State Machine"

    }, 

    "Entry": {
        "prefix": ["entry ("],
        "body": ["entry (${1:_parameters_}) {",
        "\t${2:_body_};",
        "}"
        ], 
        "description":"Entry Function: Gets executed when a machine enters the current state"
    },

    "Exit": {
        "prefix": ["exit ("],
        "body": ["exit (${1:_parameters_})",
        "{",
        "\t${2:_body_};",
        "}"
        ],
        "description":"Exit Function: Gets executed when a machine exits the current state"
    },

    "On Do": {
        "prefix": ["on "],
        "body": ["on ${1:_event_} do ${2|_function_,_nonFunction_|};"], 
        "description": "When the [event] happens, do the [action]."
    },

    "On Goto": {
        "prefix": ["on "],
        "body": ["on ${1:_event_} goto ${2:_stateName_} with ${3|_function_,_nonFunction_|};"],
        "description": "When the [event] happens, goto [a state] with [action]."
    },

    "Test": {
        "prefix": ["test "],
        "body": ["test ${1:_name_} [main=${2:_mainMachine_}]:", "\tassert ${3:_monitorList_} in", "\t${4:_module_}"],
        "description": "P Test Case run with 'p check' command"
    },

    "While-Loop": {
        "prefix": ["while ( "],
        "body": ["counter = 0;","while (i < ${1:_expression_})","{", "\t${2:_statement_};", "\tcounter = counter+1;","}"],
        "description": "While loop with default counter"
    }, 

    "ForEach-Loop": {
        "prefix": ["foreach ( "],
        "body": ["foreach (${2:_element_} in ${1:_array_})", "{", "\t${3:_statement_};", "}"],
        "description": "Foreach Loop iterates over elements in a set, collection, or map"
    },
    "Raise": {
        "prefix": ["raise "],
        "body": ["raise ${1:_event_}, ${2:_payload_};"],
        "description": "Raise Statement: Terminates the evaluation of a function, raising [event] with [payload]."
    },
    "Send": {
        "prefix": ["send "],
        "body": ["send ${1:_targetMachine_}, ${2:_event_}, ${3:_payload_};"], 
        "description": "Send Statement: Sends messages to other state machines"
    }, 
    "Assert Statement": {
        "prefix": ["assert "],
        "body": ["assert (${1:_assertion_});"],
        "description": "Assert Statement: Makes a local assertion. If the program violates the assertion, a counter example is generated by the P Checker."
    }, 
    "Assert with Error Message": {
        "prefix": ["assert "],
        "body": ["assert (${1:_assertion_}), \"${2:_errorMessage_}\";"],
        "description": ["Assert Statement: Makes a local assertion and also prints a message in the error trace."]
    }, 
    "Assert with Formatted Error Message": {
        "prefix": ["assert "],
        "body": ["assert (${1:_assertion_}), format(\"${2:_errorMessage_}\");"],
        "description": ["Assert Statement: Makes a local assertion and also prints a formatted message in the error trace."]
    }, 
    "Print Message": {
        "prefix": ["print "],
        "body": ["print ${1:_message_};"],
        "description": ["Print Statement: Writes or prints log message into error traces. "]
    }, 
    "Print Formatted Message": {
        "prefix": ["print format(\""],
        "body": ["print format(${1:_message_});"],
        "description": ["Print Statement: Writes or prints formatted log message into the error traces. "]
    },
    "If Statement": {
        "prefix": ["if ", "if( "],
        "body": ["if (${1:_condition_})", "{", "\t${2:_statement_};", "}"], 
        "description": ["If statement: If the conditional is met, the statement is run."]
    },
    "If-Else Statement": {
        "prefix": ["if ", "if( "],
        "body": ["if (${1:_condition_})", "{", "\t${2:_statement_};", "}", "else", "{","\t${3:_statement_};", "}"], 
        "description": ["If-Else statement: If the conditional is met, the statement is run. If it isn't met, the else statement is run."]
    },
    "New Statement": {
        "prefix": ["new "],
        "body": ["new ${1:_instance_}(${2:_constructorParameters_});"], 
        "description": ["Creates a dynamic instance of the object and passes the constructor parameters in."]
    }, 
    "Announce Statement": {
        "prefix": ["announce "], 
        "body": ["announce ${1:_event_}, ${2:_payload_};"],
        "description": ["Announce Statement: Announces if an event has occured to specification monitors during system execution."]
    },
    "Goto Statement": {
        "prefix": ["goto "],
        "body": ["goto ${1:_state_};"],
        "description": ["Goto Statement: Terminates the execution of the current function and enters the target state."]
    },
    "Goto Statement with Payload": {
        "prefix": ["goto "], 
        "body": ["goto ${1:_state_}, ${2:_payload_};"], 
        "description": ["Goto Statement: Terminates the execution of the current function and enters the target state with the input parameters."]
    }, 
    "Receive Statement": {
        "prefix": ["receive {"], 
        "body": ["receive { ", "\tcase ${1:_event_}: {${2:_caseHandler_}}","}"],
        "description": ["Receive Statement: Blocks await/receive for a set of events inside a function."]
    },
    "Variable": {
        "prefix": ["var "],
        "body": ["var ${1:_name_}: ${2:_type_};"],
        "description": ["This is a variable declaration."]
    }
}


